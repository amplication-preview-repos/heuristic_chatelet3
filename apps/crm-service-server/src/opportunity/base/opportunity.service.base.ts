/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Opportunity as PrismaOpportunity,
  Task as PrismaTask,
  Customer as PrismaCustomer,
} from "@prisma/client";

export class OpportunityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OpportunityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.opportunity.count(args);
  }

  async opportunities<T extends Prisma.OpportunityFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OpportunityFindManyArgs>
  ): Promise<PrismaOpportunity[]> {
    return this.prisma.opportunity.findMany<Prisma.OpportunityFindManyArgs>(
      args
    );
  }
  async opportunity<T extends Prisma.OpportunityFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.OpportunityFindUniqueArgs>
  ): Promise<PrismaOpportunity | null> {
    return this.prisma.opportunity.findUnique(args);
  }
  async createOpportunity<T extends Prisma.OpportunityCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OpportunityCreateArgs>
  ): Promise<PrismaOpportunity> {
    return this.prisma.opportunity.create<T>(args);
  }
  async updateOpportunity<T extends Prisma.OpportunityUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OpportunityUpdateArgs>
  ): Promise<PrismaOpportunity> {
    return this.prisma.opportunity.update<T>(args);
  }
  async deleteOpportunity<T extends Prisma.OpportunityDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.OpportunityDeleteArgs>
  ): Promise<PrismaOpportunity> {
    return this.prisma.opportunity.delete(args);
  }

  async findTasks(
    parentId: string,
    args: Prisma.TaskFindManyArgs
  ): Promise<PrismaTask[]> {
    return this.prisma.opportunity
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tasks(args);
  }

  async getCustomer(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.opportunity
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }
}
